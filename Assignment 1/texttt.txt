
R version 4.3.0 (2023-04-21 ucrt) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Load required libraries
> library(Ecdat)
Loading required package: Ecfun

Attaching package: 'Ecfun'

The following object is masked from 'package:base':

    sign


Attaching package: 'Ecdat'

The following object is masked from 'package:datasets':

    Orange

> library(dynlm)
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> library(TS)
Loading required package: urca
Loading required package: vars
Loading required package: MASS

Attaching package: 'MASS'

The following object is masked from 'package:Ecdat':

    SP500

Loading required package: strucchange
Loading required package: sandwich
Loading required package: lmtest
Loading required package: tseries
Registered S3 method overwritten by 'quantmod':
  method            from
  as.zoo.data.frame zoo 
> library(tseries) # used for jarque.bera.test
> 
> # Load dataset IncomeUK (from package Ecdat)
> data(IncomeUK, package = "Ecdat")
> income <- IncomeUK[, "income"] # Rename the variable to avoid conflict
> 
> ################################################################################
> #                          QUESTION 1: Autoregressive models                    #
> ################################################################################
> 
> model_list <- list()
> 
> # Create lags
> lags <- embed(income, 5)
> lags <- lags[1:(length(income) - 5), ] # Keep only the relevant rows
> 
> for (i in 1:5) {
+     assign(paste0("lag_", i), lags[, i])
+ }
> 
> for (lag in 1:5) {
+     # Create the formula for the current lag
+     formula <- as.formula(paste0("income[6:length(income)] ~ ", paste0("lag_", 1:lag, collapse = " + ")))
+ 
+     # Fit the model with the current lag value
+     model <- lm(formula, data = IncomeUK)
+ 
+     # Add the model object to the list
+     model_list[[lag]] <- model
+     assign(paste0("model_", lag), model_list[[lag]])
+ }
> 
> for (lag in 1:5) {
+     print(model_list[[lag]])
+     message(paste(rep("- ", 35), collapse = ""))
+ }

Call:
lm(formula = formula, data = IncomeUK)

Coefficients:
(Intercept)        lag_1  
    591.638        1.011  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Call:
lm(formula = formula, data = IncomeUK)

Coefficients:
(Intercept)        lag_1        lag_2  
   797.1529       0.6429       0.3718  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Call:
lm(formula = formula, data = IncomeUK)

Coefficients:
(Intercept)        lag_1        lag_2        lag_3  
   637.1515       0.7018       0.5871      -0.2789  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Call:
lm(formula = formula, data = IncomeUK)

Coefficients:
(Intercept)        lag_1        lag_2        lag_3        lag_4  
   706.2236       0.7378       0.5349      -0.4364       0.1759  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Call:
lm(formula = formula, data = IncomeUK)

Coefficients:
(Intercept)        lag_1        lag_2        lag_3        lag_4        lag_5  
   474.1020       0.8012       0.3974      -0.3398       0.6467      -0.5004  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
> 
> 
> ################################################################################
> #                    QUESTION 2: Akaikes information criteria                  #
> ################################################################################
> 
> # Calculating the AIC for the different models
> aic_values <- c(
+     AIC(model_1), AIC(model_2), AIC(model_3), AIC(model_4), AIC(model_5)
+ )
> 
> # Determine the minimum value of the models
> best_model_aic <- which.min(aic_values)
> cat("Best model based on AIC: ", best_model_aic, "\n")
Best model based on AIC:  5 
> 
> ################################################################################
> #                   QUESTION 3: Ljung-Box & Jarque-Bera tests                  #
> ################################################################################
> 
> # Define the model list
> model_list <- list(model1, model2, model3, model4, model5)
Error: object 'model1' not found
Execution halted
