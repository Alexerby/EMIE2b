
R version 4.3.0 (2023-04-21 ucrt) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> silence <- suppressPackageStartupMessages
> 
> silence(library(forecast))
> silence(library(lmtest))
> silence(library(sandwich))
> 
> 
> 
> #########################################################
> #           COMMENTS REGARDING THE DATASET              #
> #########################################################
> # The dataset contains 7 variables:
> #
> #       recursive_forecast_h1
> #       recursive_forecast_h12
> #       recursive_forecast_h24
> #
> #       rolling_forecast_h1
> #       rolling_forecast_h12
> #       rolling_forecast_h24
> #
> #       cpif     (a compiled time series from SCB)
> #
> #########################################################
> #
> # If load("forecasts.Rdata") does not execute properly,
> # make sure that setwd() is properly configured to the
> # directory of forecasts.Rdata
> 
> 
> setwd(
+         "E:\\Uni\\Econometrics 2b\\R\\Assignments\\Assignment 3"
+ )
> 
> # Load created dataset
> load("forecasts.Rdata")
> 
> 
> 
> #########################################################
> #          Question 1: Plotting recursive models        #
> #########################################################
> #
> # All the data handling and creation is made in the
> # "Data compilation.R" file which is where we call the
> # API to SCBs Statistikdatabas (using pxweb).
> 
> #########################################################
> #          Question 2: Plotting recursive models        #
> #########################################################
> 
> # Down below we plot the (2 x 3 = 6) models for h = 1, 12, 24
> 
> origin_1 <- 2002 + 11 / 12
> n_origins <- length(window(cpif, start = origin_1, end = 2020 + 10 / 12))
> 
> par(mfrow = c(3, 2))
> 
> forecast_plot <- function(model, hmax, type) {
+         # Plots for horizon = 1
+         ts.plot(model, 
+         main = paste(type, "forecast (recursive)"),
+         col = "#008080")
+         lines(window(cpif, start = origin_1), col = "#FF7F50")
+         legend("topleft", legend = c("Inflation rate",
+                                 paste(hmax, "-step forecast")),
+                                 lty = 1,
+                                 col = c("#FF7F50", "#008080"))
+ }
> 
> # Plot our 6 recursive models
> forecast_plot(recursive_forecast_h1$re_arima_plot, 1, type = "ARIMA")
> forecast_plot(recursive_forecast_h1$re_ar1_plot, 1, type = "AR(1)")
> forecast_plot(recursive_forecast_h12$re_arima_plot, 12, type = "ARIMA")
> forecast_plot(recursive_forecast_h12$re_ar1_plot, 12, type = "AR(1)")
> forecast_plot(recursive_forecast_h24$re_arima_plot, 24, type = "ARIMA")
> forecast_plot(recursive_forecast_h24$re_ar1_plot, 24, type = "AR(1)")
> 
> #########################################################
> #          Question 3: Newey West bias testing          #
> #########################################################
> 
> # Define function for extracting pval for NW
> test_bias <- function(h, errors) {
+   model <- lm(errors[, h] ~ 1)
+   NW_cov <- NeweyWest(model, lag = h - 1)
+   pval_pos <- 4
+   pval <- round(coeftest(model, vcov. = NW_cov)[[pval_pos]], 4)
+   return(pval)
+ }
> 
> 
> newey <- function(hmax, model) {
+ 
+         # Create empty matrix
+         outcome <- ts(
+         data = matrix(NA, nrow = n_origins, ncol = hmax),
+         start = origin_1,
+         frequency = frequency(cpif))
+ 
+         # Loop through the origins
+         for (i in 1:n_origins) {
+                 # we do not want to include the origin itself
+                 start_date <- origin_1 + i / 12
+                 end_date <- start_date + 1 / 12
+                 outcome[i, ] <- window(cpif, start = start_date, end = end_date)
+         }
+ 
+         colnames(outcome) <- paste0("h=", 1:hmax)
+ 
+         error <- outcome - model
+         newey_pval <- do.call(rbind, lapply(1:hmax, test_bias, error))
+ 
+         return(list(error = error, newey = newey_pval))
+ }
> 
> 
> 
> # Store functions for all our recursive and rolling models. The $newey sublist
> # is used in this question (3) and the $error sublist for next question
> re_nw_arima_h12 <- newey(hmax = 12, model = recursive_forecast_h12$re_arima_mean)
> re_nw_arima_h24 <- newey(hmax = 24, model = recursive_forecast_h24$re_arima_mean)
> 
> re_nw_ar_h12 <- newey(hmax = 12, model = recursive_forecast_h12$re_ar1_mean)
> re_nw_ar_h24 <- newey(hmax = 24, model = recursive_forecast_h24$re_ar1_mean)
> 
> ro_nw_arima_h12 <- newey(hmax = 12, model = rolling_forecast_h12$ro_arima_mean)
> ro_nw_arima_h24 <- newey(hmax = 24, model = rolling_forecast_h24$ro_arima_mean)
> 
> ro_nw_ar_h12 <- newey(hmax = 12, model = rolling_forecast_h12$ro_ar1_mean)
> ro_nw_ar_h24 <- newey(hmax = 24, model = rolling_forecast_h24$ro_ar1_mean)
> 
> 
> # Newey West for Arima, h = 12
> re_nw_arima_h12$newey
        [,1]
 [1,] 0.2240
 [2,] 0.3112
 [3,] 0.2002
 [4,] 0.1748
 [5,] 0.1404
 [6,] 0.0973
 [7,] 0.0630
 [8,] 0.0427
 [9,] 0.0396
[10,] 0.0290
[11,] 0.0273
[12,] 0.0487
> 
> # Newey West for Arima, h = 24
> re_nw_arima_h24$newey
        [,1]
 [1,] 0.2240
 [2,] 0.3112
 [3,] 0.2002
 [4,] 0.1748
 [5,] 0.1404
 [6,] 0.0973
 [7,] 0.0630
 [8,] 0.0427
 [9,] 0.0396
[10,] 0.0290
[11,] 0.0273
[12,] 0.0487
[13,] 0.0417
[14,] 0.0379
[15,] 0.0291
[16,] 0.0291
[17,] 0.0211
[18,] 0.0225
[19,] 0.0122
[20,] 0.0136
[21,] 0.0055
[22,] 0.0062
[23,] 0.0022
[24,] 0.0019
> 
> # Newey West for AR, h = 12
> re_nw_ar_h12$newey
        [,1]
 [1,] 0.2941
 [2,] 0.4142
 [3,] 0.0001
 [4,] 0.0273
 [5,] 0.0000
 [6,] 0.0004
 [7,] 0.0000
 [8,] 0.0000
 [9,] 0.0000
[10,] 0.0000
[11,] 0.0000
[12,] 0.0000
> 
> # Newey West for AR, h = 24
> re_nw_ar_h24$newey
        [,1]
 [1,] 0.2941
 [2,] 0.4142
 [3,] 0.0001
 [4,] 0.0273
 [5,] 0.0000
 [6,] 0.0004
 [7,] 0.0000
 [8,] 0.0000
 [9,] 0.0000
[10,] 0.0000
[11,] 0.0000
[12,] 0.0000
[13,] 0.0000
[14,] 0.0000
[15,] 0.0000
[16,] 0.0000
[17,] 0.0000
[18,] 0.0000
[19,] 0.0000
[20,] 0.0000
[21,] 0.0000
[22,] 0.0000
[23,] 0.0000
[24,] 0.0000
> 
> # This test have a null hypothesis of no bias, we can see from
> # the results above that we reject the null hypothesis the further
> # away the horizon.
> 
> 
> #########################################################
> #          Question 4: Diebold-Mariano test             #
> #########################################################
> 
> # We currently have 2x3 recursive functions, we have
> # 3 different horizons, and two types (AR & ARIMA models).
> # However, test can not be performed on model with h = 1,
> # making this question have 4 predictions.
> #
> # In addition to that we also in the data compilation
> # script created rolling models, because they need to be used
> # for this last question when predicting p-values for the
> # Diebold-Mariano test.
> #
> # This implies that we will need to run this prediction test
> # 6 times. Thus, we are again creating a function for this.
> 
> 
> dm_test <- function(recursive_model, rolling_model, hmax, type) {
+ 
+         prec_pvals <- data.frame(
+         h = 1:hmax,
+         pval = NA
+         )
+ 
+         for (h in 1:hmax) {
+         test <- dm.test(recursive_model[, h], rolling_model[, h], h = h)
+ 
+         prec_pvals$pval[h] <- test$p.value
+         }
+ 
+         cat(
+         "\nP-values for model type",
+         toupper(type), "with hmax", 
+         hmax, ":\n\n")
+ 
+         prec_pvals
+ }
> 
> # ARIMA models
> dm_test(re_nw_arima_h12$error, ro_nw_arima_h12$error, hmax = 12, type = "Arima")

P-values for model type ARIMA with hmax 12 :

    h      pval
1   1 0.9995515
2   2 0.8544207
3   3 0.2558566
4   4 0.4426005
5   5 0.9548012
6   6 0.9120560
7   7 0.6266555
8   8 0.6157500
9   9 0.4417987
10 10 0.4616426
11 11 0.3320396
12 12 0.2217036
> dm_test(re_nw_arima_h24$error, ro_nw_arima_h24$error, hmax = 24, type = "Arima")

P-values for model type ARIMA with hmax 24 :

    h      pval
1   1 0.9995515
2   2 0.8544207
3   3 0.2558566
4   4 0.4426005
5   5 0.9548012
6   6 0.9120560
7   7 0.6266555
8   8 0.6157500
9   9 0.4417987
10 10 0.4616426
11 11 0.3320396
12 12 0.2217036
13 13 0.2740357
14 14 0.3413416
15 15 0.3013820
16 16 0.3690643
17 17 0.3531864
18 18 0.4497371
19 19 0.4396342
20 20 0.5338157
21 21 0.4772219
22 22 0.5562050
23 23 0.5153942
24 24 0.6079052
> 
> # AR models
> dm_test(re_nw_ar_h12$error, ro_nw_ar_h12$error, hmax = 12, type = "AR")

P-values for model type AR with hmax 12 :

    h      pval
1   1 0.8275127
2   2 0.8276295
3   3 0.2330039
4   4 0.4736281
5   5 0.1322713
6   6 0.3412888
7   7 0.1102891
8   8 0.3011906
9   9 0.1398191
10 10 0.3201963
11 11 0.1787928
12 12 0.3680429
> dm_test(re_nw_ar_h24$error, ro_nw_ar_h24$error, hmax = 24, type = "AR")

P-values for model type AR with hmax 24 :

    h      pval
1   1 0.8275127
2   2 0.8276295
3   3 0.2330039
4   4 0.4736281
5   5 0.1322713
6   6 0.3412888
7   7 0.1102891
8   8 0.3011906
9   9 0.1398191
10 10 0.3201963
11 11 0.1787928
12 12 0.3680429
13 13 0.2615929
14 14 0.4587971
15 15 0.3765785
16 16 0.5787442
17 17 0.5244421
18 18 0.7261948
19 19 0.7098830
20 20 0.8799243
21 21 0.9030733
22 22 0.9586903
23 23 0.9046173
24 24 0.7959931
> 
> 
> # We can not reject the null hypothesis of
> # equal precision for any of our models on a 5% significance level.
> 
> proc.time()
   user  system elapsed 
   2.15    0.32    2.57 
